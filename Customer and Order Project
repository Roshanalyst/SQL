/*1. How many orders were placed in January? */
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

/*2. How many of those orders were for an iPhone?*/ 
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE product = 'iPhone'
AND length(orderID) = 6
AND orderID <> 'Order ID';

/*3. Select the customer account numbers for all the orders that were placed in February. */ 
SELECT distinct acctnum
FROM BIT_DB.customers 
INNER JOIN BIT_DB.FebSales
ON BIT_DB.customers.order_ID = BIT_DB.FebSales.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order I

/*4. Which product was the cheapest one sold in January, and what was the price?*/ 
SELECT DISTINCT Product,
price 
FROM BIT_DB.JanSales
WHERE price IN (SELECT MIN(price) FROM BIT_DB.JanSales);

/*Distinct function was used to select the distinct/unique values from the Product and price columns, which we are retrieving from BIT_DB.JanSales table. I also
chose to filter by price to filter the rows where the value in 'price' column matches the minimum price found within the subquery; this subquery calculates the minimum price. All in all, the query will give a list of 
unique values from the specified column where the price matches the minimum price in the "BIT_DB.JanSales*/

/*5. What is the total revenue for each product sold in January?
 (Revenue can be calculated using the number of products sold and the price of the products).*/

SELECT Product, 
SUM(Quantity)*price AS revenue
FROM BIT_DB.JanSales
GROUP BY Product; 

/*Since we are calculating the total revenue for each product, I wanted to select the Product column 
as well as summing the quantity for each product and multiplying the total quantity to the price; this 
new calculation was renamed 'revenue'. Lastly, the data of the total revenue was grouped by 'Product', which
was accomplished by GROUP BY clause. */


/*6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, 
how many of each were sold, and what was the total revenue?*/ 

SELECT Product,
location,
Quantity,
SUM(Quantity)*price AS revenue 
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101';

/* Firstly, I identified the columns that were needed to address this question: Product, location,
Quantity, and total revenue (which is a calculation that does not exist yet in the FebSales table). 
After selecting all existing columns, I created a separate column that sums up the total of the 
products and named it 'revenue'. Since it was only 
one location/address, I specified with the WHERE clause that the location column is '548 Lincoln St, Seattle, WA 98101'/. */


/*7. How many customers ordered more than 2 products at a time in February, and what was the average
amount spent for those customers?*/ 

SELECT Product, 
AVG(Quantity)*price as avg_total,
COUNT(acctnum)
FROM BIT_DB.FebSales 
LEFT JOIN BIT_DB.customers
ON BIT_DB.FebSales.orderID = BIT_DB.customers.order_id
WHERE BIT_DB.FebSales.Quantity > 2
AND length(orderid) = 6 
AND orderid <> 'Order ID';




