SELECT * 
FROM BIT_DB.customers 
LIMIT 20;

SELECT * 
FROM JanSales 
LIMIT 20;


/*1. How many orders were placed in January? */
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

/*I used the COUNT function to calculate how many orders were specifically placed in January. 

/*2. How many of those orders were for an iPhone?*/ 
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE product = 'iPhone'
AND length(orderID) = 6
AND orderID <> 'Order ID';

/*I used the COUNT function to calculate how many orders filtered with the WHERE function to calculate 
based only on the iphone. */ 


/*3. Select the customer account numbers for all the orders that were placed in February. */ 
SELECT distinct acctnum
FROM BIT_DB.customers 
INNER JOIN BIT_DB.FebSales
ON BIT_DB.customers.order_ID = BIT_DB.FebSales.orderID
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*The questions asks for customer account numbers that were placed in February, which calls for an INNER JOIN function. 
The only column that both tables have are orderID/order_ID, which will help to pull any similiarities within both 
tables that relate to acctnum that are not duplicates. There's also a query that filters any order ID's that have
a character length more than 6 and have anything other than the actual ID number*/

/*4. Which product was the cheapest one sold in January, and what was the price?*/ 
SELECT DISTINCT Product,
price 
FROM BIT_DB.JanSales
WHERE price IN (SELECT MIN(price) FROM BIT_DB.JanSales);

/*To find the cheapest product sold in January, I pulled columns Product and price; I used the DISTINCT funtion
to remove any duplicates of products that might skew the number. From there, to find the cheapest price, I implented a subquery
that specifically uses the MIN function. */

/*Distinct function was used to select the distinct/unique values from the Product and price columns, which we are retrieving from BIT_DB.JanSales table. I also
chose to filter by price to filter the rows where the value in 'price' column matches the minimum price found within the subquery; this subquery calculates the minimum price. All in all, the query will give a list of 
unique values from the specified column where the price matches the minimum price in the "BIT_DB.JanSales*/

/*5. What is the total revenue for each product sold in January?
 (Revenue can be calculated using the number of products sold and the price of the products).*/

SELECT Product, 
SUM(Quantity)*price AS revenue
FROM BIT_DB.JanSales
GROUP BY Product; 

/*Since we are calculating the total revenue for each product, I wanted to select the Product column 
as well as summing the quantity for each product and multiplying the total quantity to the price; this 
new calculation was renamed 'revenue'. Lastly, the data of the total revenue was grouped by 'Product', which
was accomplished by GROUP BY clause. */


/*6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, 
how many of each were sold, and what was the total revenue?*/ 

SELECT Product,
location,
Quantity,
SUM(Quantity)*price AS revenue 
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101';

/* Firstly, I identified the columns that were needed to address this question: Product, location,
Quantity, and total revenue (which is a calculation that does not exist yet in the FebSales table). 
After selecting all existing columns, I created a separate column that sums up the total of the 
products and named it 'revenue'. Since it was only 
one location/address, I specified with the WHERE clause that the location column is '548 Lincoln St, Seattle, WA 98101'/. */


/*7. How many customers ordered more than 2 products at a time in February, and what was the average
amount spent for those customers?*/ 

SELECT Product, 
AVG(Quantity*price) as avg_total,
COUNT(acctnum)
FROM BIT_DB.FebSales 
LEFT JOIN BIT_DB.customers
ON BIT_DB.FebSales.orderID = BIT_DB.customers.order_id
WHERE BIT_DB.FebSales.Quantity > 2
AND length(orderid) = 6 
AND orderid <> 'Order ID';


/*There are several columns that I would like to select for this prompt: Product, acctnum, Quantity and price. 
Since we are looking for the average total amount spent for these customers that ordered more than 2
products, I used the AVG function to calculate the product of quantity and price. Since the columns that I'm pulling
from are from 2 different tables, I also want to use the COUNT function to count how many customers
that ordered more than 2 products in the month of February. Now I wanted to join all records from the FebSales table and match 
the customer info from the customers table, which is why I used LEFT JOIN function. Lastly, to tie it all together, 
I filtered based on Quantity of more than 2 from the FebSales table to get the results. */



